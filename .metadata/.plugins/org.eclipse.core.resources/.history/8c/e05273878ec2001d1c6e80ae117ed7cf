/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/file', 'N/record', 'N/runtime', 'N/search'],
/**
 * @param {file} file
 * @param {record} record
 * @param {runtime} runtime
 * @param {search} search
 */
function(file, record, runtime, search) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	try{

    	var folderSearchObj = search.create({
    		type: "folder",
    		   filters:
    		   [
    		      ["internalid","anyof","13599"]
    		   ],
    		   columns:
    		   [
    		      search.createColumn({
    		         name: "internalid",
    		         join: "file",
    		         label: "Field ID"
    		      })
    		   ]
    		});
    	
    	      var aRray = new Array();
		      var fileName = '';
		      var fileId;   	
    		var searchResultCount = folderSearchObj.runPaged().count;
    		log.debug("folderSearchObj result count",searchResultCount);
    		folderSearchObj.run().each(function(result){
    			fileId = result.getValue({ name: "internalid",join: "file",});
				log.debug("fileId",fileId);
				

				filename = result.getValue({name: 'name',join:'file'});
				log.debug('filename',filename);
    			
				if(fileId){
					aRray.push({'fileId':fileId,'fileName':fileName});
				}
    		   return true;
    		});
    		log.debug('aRray',aRray);
    		return aRray;

    		/*
    		folderSearchObj.id="customsearch1678722409923";
    		folderSearchObj.title="CHT SR (copy)";
    		var newSearchId = folderSearchObj.save();
    		*/
    }
   
    catch(e){
    	log.error("Error in getInputData");
    }
    }
    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	  try{
    	      	log.debug('In Map Stage','In Map Stage');
    	  		var invResults = JSON.parse(context.value);
    	  		log.debug('invResults:',invResults);

    	  		var m_fileId = invResults.fileId;
    	  		log.debug('m_fileId',m_fileId);
    	  		
    	  		var fileObj = file.load({
    	  		    id: m_fileId
    	  		});
    	  		var fileContents;
    	  		if (fileObj.size < 10485760){
    	  		fileContents=  fileObj.getContents();
    	  		log.debug('fileContents',fileContents);
    	  		    }
    	  		
    	  		log.debug('Value_length',context.value.length);
    	  		 var csvData = fileContents.split(/\r?\n/).map(function (line) {
    	  		      return line.split(',');
    	  		    });
    	  		
    	  		
    	  		
    	  		  var rows = csvData.slice(1); 
    	  	    for (var i = 0; i < rows.length; i++) {
    	  	      var externalId = rows[i][0];
    	  	      var customer = rows[i][1];
    	  	      var item = rows[i][2];
    	  	      var quantity = rows[i][3];
    	  	      var rate = rows[i][4];
    	  	      var amount = rows[i][5];
    	  	      var location = rows[i][6];
    	  	      var taxCode = rows[i][7];

    	  	     
    	  	     
    	  	    
    	  			
    	  			
    	  			
    	  			context.write({
        	  			key :m_fileId,
        	  			value :{
        	  				'm_fileId':m_fileId,
        	  				'customer':customer,
        	  				'External_ID':externalId,
        	  				'Item':item,
        	  				'Quantity':quantity,
        	  				'Rate':rate,
        	  				'Amount':amount,
        	  				'Location':location,
        	  				'Tax_Code':taxCode
        	  				
        	  			}
        	  		});
    	  			
    	  		}
    	  		
    	  		

    	  		

    	  	}catch(e){
    	  		log.error('Error in map',e);
    	  	}

    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {
    	try{
    		var value = context.values;
    		var value_Length=context.values.length;
    	    
    		log.debug('In Reduce Stage');
    		log.debug('Key:',context.key);
    		log.debug('value:',context.values);
    		log.debug('value Length:',context.values.length);
    		
    		 var invoiceRecord = record.create({
    			    type: record.Type.INVOICE,
    			    isDynamic: true
    			  });
    			  
    			  
    			 /* invoiceRecord.setValue({
    			    fieldId: 'entity',
    			    value: customerName
    			  });
    			  invoiceRecord.selectNewLine({
    			    sublistId: 'item'
    			  });
    			  invoiceRecord.setCurrentSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'item',
    			    value: itemName
    			  });
    			  invoiceRecord.setCurrentSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'quantity',
    			    value: quantity
    			  });
    			  invoiceRecord.setCurrentSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'rate',
    			    value: price
    			  });
    			  invoiceRecord.commitLine({
    			    sublistId: 'item'
    			  });*/
    			  
    	
    			}

    	
    	catch(e){
    		log.error("Error In Reduce Stage")
    	}

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
