/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(
		[ 'N/file', 'N/record', 'N/runtime', 'N/search' ],

		function(file, record, runtime, search) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	try {
    		
    		var openInvoiceList = [];
    		var invoiceSearchObj = search.create({
    			   type: "invoice",
    			   filters:
    			   [
    			      ["type","anyof","CustInvc"], 
    			      "AND", 
    			      ["name","anyof","25802"], 
    			      "AND", 
    			      ["mainline","is","F"], 
    			      "AND", 
    			      ["status","anyof","CustInvc:A"], 
    			      "AND", 
    			      ["duedate","within","3/10/2023","3/20/2023"], 
    			      "AND", 
    			      ["cogs","is","F"], 
    			      "AND", 
    			      ["taxline","is","F"]
    			   ],
    			   columns:
    			   [
    			      search.createColumn({name: "tranid", label: "Document Number"}),
    			      search.createColumn({name: "entity", label: "Name"}),
    			      search.createColumn({name: "amount", label: "Amount"}),
    			      search.createColumn({name: "amountpaid", label: "Amount Paid"}),
    			      search.createColumn({name: "email", label: "Email"})
    			   ]
    			});
    			var searchResultCount = invoiceSearchObj.runPaged().count;
    			log.debug("invoiceSearchObj result count",searchResultCount);
    			invoiceSearchObj.run().each(function(result){
    			   // .run().each has a limit of 4,000 results
    			   return true;
    			});

    			/*
    			invoiceSearchObj.id="customsearch1678900444436";
    			invoiceSearchObj.title="CHT Shubham (copy)";
    			var newSearchId = invoiceSearchObj.save();
    			*/
    		
    	}catch(e){
    		
    	}

    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {

    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
